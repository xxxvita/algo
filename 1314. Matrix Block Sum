// Используется алгоритм с префиксными суммами.
// Time: O(n*m)
// Mem: O(n*m)
type NumMatrix struct {
	mas [][]int
}

func Constructor(matrix [][]int) NumMatrix {
	var nm NumMatrix

	nm.mas = make([][]int, len(matrix)+1)
	width := len(matrix[0]) + 1
	for j := 0; j < len(nm.mas); j++ {
		nm.mas[j] = make([]int, width)
	}

	for j := 1; j < len(nm.mas); j++ {
		for i := 1; i < len(nm.mas[0]); i++ {
			nm.mas[j][i] = nm.mas[j][i-1] + nm.mas[j-1][i] -
				nm.mas[j-1][i-1] + matrix[j-1][i-1]
		}
	}

	return nm
}

func (this *NumMatrix) SumRegion(row1 int, col1 int, row2 int, col2 int) int {
	nm := this.mas
	row2 += 1
	col2 += 1
	row1 += 1
	col1 += 1

	return nm[row2][col2] - nm[row1-1][col2] - nm[row2][col1-1] + nm[row1-1][col1-1]
}
