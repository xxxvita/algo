// Тут просто: решается Inplace, ищем подряд идущие элементы, записываем
// на месте последовательности Символ+число, если число больше 1.
import (
	"fmt"
	"strconv"
)
//Time: O(n)
//mem: O(1)
func compress(chars []byte) int {
	currentPos := 0
	cnt := 0
	current_seq_el := chars[0]

	// ["a","a","b","b","c","c","c"]
	for idx := 1; idx < len(chars); idx++ {
		currentChar := chars[idx]
		if currentChar != current_seq_el {
			// Запись длины
			// запись символа
			chars[currentPos] = current_seq_el
			currentPos++
			// длинна количества
			s_current := strconv.Itoa(cnt + 1)
			if cnt > 0 {
				for c := 0; c < len(s_current); c++ {
					chars[currentPos] = s_current[c]
					currentPos++
				}
			}

			cnt = 0
			current_seq_el = chars[idx]
		} else {
			cnt++
		}
	}

	// запись символа
	chars[currentPos] = current_seq_el
	currentPos++
	// длинна количества
	if cnt > 0 {
		sCurrent := strconv.Itoa(cnt + 1)
		for c := 0; c < len(sCurrent); c++ {
			chars[currentPos] = sCurrent[c]
			currentPos++
		}
	}

	return currentPos
}
